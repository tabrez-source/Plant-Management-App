package ca.on.conestogac.assignment_one_scaffold;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import java.util.Arrays;

@SpringBootApplication
public class AssignmentOneScaffoldApplication implements CommandLineRunner {

    /** Include Academic Freedom Statement here:
     This submission is Shamsh Tabrez Shaikh's original work and has not been copied or generated by a bot. 
     I have read and understood the rules regarding academic freedom, and I am aware that an academic violation 
     not only affects my school record but also has consequences for myself, my peers, Conestoga College, and society as a whole.
     */

    public static void main(String[] args) {
        SpringApplication.run(AssignmentOneScaffoldApplication.class, args);
        
        // Create an instance of PlantManager (which implements PlantOperations)
        PlantOperations plantManager = new PlantManager(); 

        // Injecting PlantManager into PlantController
        PlantController controller = new PlantController(plantManager);

        // Add and display plants using the controller with specific prices
        controller.addPlant("Rose", "Flowering Plant", 15.99, "A type of woody perennial plant of the genus Rosa.");
        controller.addPlant("Bamboo", "Grass", 25.50, "A fast-growing plant in the grass family Poaceae.");
        controller.displayPlants();

        // Display the total value of all plants
        controller.displayTotalValue();
    }

    @Override
    public void run(String... args) throws Exception {
        System.out.println("Hello World from AssignmentOneScaffoldApplication");
        
        // The following code blocks were generated with the assistance of ChatGPT based on the prompt:
        // "Provide Java methods for string filtering, solving a logic puzzle, and normalizing a dataset with test cases."

        // CLEAN Example: Removes all 'a' characters
        var result1 = PartA.tagAndFilter("Aloe Vera", "a", "CLEAN");
        System.out.println("CLEAN Result: " + result1.tagged_plant() + ", Count: " + result1.tag_count());
    
        // TAG Example: Adds <p> tags to the string
        var result2 = PartA.tagAndFilter("This is a plant description", "", "TAG");
        System.out.println("TAG Result: " + result2.tagged_plant() + ", Count: " + result2.tag_count());
    
        // BOTH Example: Removes all apostrophes and counts 'a' characters
        var result3 = PartA.tagAndFilter("It's a wonderful plant", "a", "BOTH");
        System.out.println("BOTH Result: " + result3.tagged_plant() + ", Count: " + result3.tag_count());

        // Demonstrate logic puzzle solving
        String[][] puzzleResult = PartA.solveLogicPuzzle(); // Call the method to solve the logic puzzle and store the result in a 2D array

        System.out.println("\nLogic Puzzle Results:"); // Print a header for the results
        // Loop through the results to display each student's pet
        for (int i = 0; i < puzzleResult[0].length; i++) { // Iterate through each student (first row of the 2D array)
            System.out.println(puzzleResult[0][i] + " has a " + puzzleResult[1][i]); // Print the student's name and the corresponding pet
        }

        // Example dataset for normalization
        double[] dataSet = {0.0, 0.25, 0.5, 0.75, 1.0}; // Sample dataset
        
        // Define the lower and upper bounds for normalization
        double lowerBound = 0; // Lower bound for normalization
        double upperBound = 1; // Upper bound for normalization
         
        // Normalize the dataset
        double[] normalizedSet = PartA.normalizeDataSet(dataSet, (int) lowerBound, (int) upperBound);
        System.out.println("\nNormalized Data Set: " + Arrays.toString(normalizedSet));
 
        // Check if the means and medians of the original and normalized datasets are proportional
        boolean meansProportional = PartA.proportionalMeans(dataSet, normalizedSet);
        boolean mediansProportional = PartA.proportionalMedian(dataSet, normalizedSet);
         
        // Print results of proportionality checks
        System.out.println("Are the means proportional? " + meansProportional);
        System.out.println("Are the medians proportional? " + mediansProportional);

        PlantManager plantManager = new PlantManager(); // Create PlantManager instance
        PlantController controller = new PlantController(plantManager);

        // Adding Plants with specific prices
        controller.addPlant("Rose", "Flowering Plant", 15.99, "A type of woody perennial plant of the genus Rosa.");
        controller.addPlant("Bamboo", "Grass", 25.50, "A fast-growing plant in the grass family Poaceae.");

        // Displaying Plants
        System.out.println("\nPlant Items:");
        controller.displayPlants();
    }
}
